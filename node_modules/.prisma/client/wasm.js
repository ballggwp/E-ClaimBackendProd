
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  employeeNumber: 'employeeNumber',
  name: 'name',
  department: 'department',
  role: 'role',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClaimScalarFieldEnum = {
  id: 'id',
  docNum: 'docNum',
  createdByName: 'createdByName',
  approverName: 'approverName',
  approverPosition: 'approverPosition',
  approverDepartment: 'approverDepartment',
  createdById: 'createdById',
  approverEmail: 'approverEmail',
  approverId: 'approverId',
  signerId: 'signerId',
  signerEmail: 'signerEmail',
  signerName: 'signerName',
  signerPosition: 'signerPosition',
  status: 'status',
  categoryMain: 'categoryMain',
  categorySub: 'categorySub',
  submittedAt: 'submittedAt',
  insurerComment: 'insurerComment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  type: 'type',
  fileName: 'fileName',
  url: 'url',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.CPMFormScalarFieldEnum = {
  claimId: 'claimId',
  accidentDate: 'accidentDate',
  accidentTime: 'accidentTime',
  location: 'location',
  cause: 'cause',
  repairShop: 'repairShop',
  repairShopLocation: 'repairShopLocation',
  policeDate: 'policeDate',
  policeTime: 'policeTime',
  policeStation: 'policeStation',
  damageOwnType: 'damageOwnType',
  damageOtherOwn: 'damageOtherOwn',
  damageDetail: 'damageDetail',
  damageAmount: 'damageAmount',
  victimDetail: 'victimDetail',
  partnerName: 'partnerName',
  partnerPhone: 'partnerPhone',
  partnerLocation: 'partnerLocation',
  partnerDamageDetail: 'partnerDamageDetail',
  partnerDamageAmount: 'partnerDamageAmount',
  partnerVictimDetail: 'partnerVictimDetail',
  phoneNum: 'phoneNum',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Fppa04BaseScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  mainType: 'mainType',
  subType: 'subType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Fppa04CPMScalarFieldEnum = {
  baseId: 'baseId',
  eventType: 'eventType',
  claimRefNumber: 'claimRefNumber',
  eventDescription: 'eventDescription',
  productionYear: 'productionYear',
  accidentDate: 'accidentDate',
  reportedDate: 'reportedDate',
  receivedDocDate: 'receivedDocDate',
  company: 'company',
  factory: 'factory',
  policyNumber: 'policyNumber',
  surveyorRefNumber: 'surveyorRefNumber',
  insurancePayout: 'insurancePayout',
  netAmount: 'netAmount',
  signatureFiles: 'signatureFiles',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Fppa04ItemCPMScalarFieldEnum = {
  id: 'id',
  baseId: 'baseId',
  category: 'category',
  description: 'description',
  total: 'total',
  exception: 'exception'
};

exports.Prisma.Fppa04AdjustmentCPMScalarFieldEnum = {
  id: 'id',
  baseId: 'baseId',
  type: 'type',
  description: 'description',
  amount: 'amount'
};

exports.Prisma.ClaimHistoryScalarFieldEnum = {
  id: 'id',
  claimId: 'claimId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  MANAGER: 'MANAGER',
  INSURANCE: 'INSURANCE'
};

exports.ClaimStatus = exports.$Enums.ClaimStatus = {
  DRAFT: 'DRAFT',
  PENDING_APPROVER_REVIEW: 'PENDING_APPROVER_REVIEW',
  PENDING_INSURER_REVIEW: 'PENDING_INSURER_REVIEW',
  AWAITING_EVIDENCE: 'AWAITING_EVIDENCE',
  PENDING_INSURER_FORM: 'PENDING_INSURER_FORM',
  PENDING_MANAGER_REVIEW: 'PENDING_MANAGER_REVIEW',
  PENDING_USER_CONFIRM: 'PENDING_USER_CONFIRM',
  AWAITING_SIGNATURES: 'AWAITING_SIGNATURES',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

exports.AttachmentType = exports.$Enums.AttachmentType = {
  DAMAGE_IMAGE: 'DAMAGE_IMAGE',
  ESTIMATE_DOC: 'ESTIMATE_DOC',
  OTHER_DOCUMENT: 'OTHER_DOCUMENT',
  USER_CONFIRM_DOC: 'USER_CONFIRM_DOC',
  INSURANCE_DOC: 'INSURANCE_DOC'
};

exports.Prisma.ModelName = {
  User: 'User',
  Claim: 'Claim',
  Attachment: 'Attachment',
  CPMForm: 'CPMForm',
  Fppa04Base: 'Fppa04Base',
  Fppa04CPM: 'Fppa04CPM',
  Fppa04ItemCPM: 'Fppa04ItemCPM',
  Fppa04AdjustmentCPM: 'Fppa04AdjustmentCPM',
  ClaimHistory: 'ClaimHistory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
